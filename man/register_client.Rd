% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logon_clients.R
\name{register_client}
\alias{register_client}
\title{Create a new client}
\usage{
register_client(
  session,
  client_id,
  client_secret,
  scope = list("openid"),
  access_token_validity = 36000,
  authorized_grant_types = list("client_credentials"),
  authorities = list("uaa.none"),
  additional_parameters = NULL,
  ...
)
}
\arguments{
\item{session}{viya_connection object, obtained through \code{session} function}

\item{client_id}{name of the new client to be created}

\item{client_secret}{client secret of the new client}

\item{scope}{The scopes allowed for the client to obtain on behalf of users, when using any grant type other than "client_credentials". Groups are treated as scopes. Therefore, the scopes that can be obtained by the client on behalf of a user will be the intersection of the user's groups and the scopes registered to the client via this property. Use the wildcard "" to match all groups. Since SAS Viya allows authorization rules to explicitly deny access to specific groups, SAS recommends always using "". The wildcard "*" will not match internal UAA scopes. This list should always include the scope "openid", which is used to assert the identity of the user that the client is acting on behalf of. For clients that only use the grant type "client_credentials" and therefore do not act on behalf of users, use the default scope "uaa.none".}

\item{access_token_validity}{The time in seconds to access token expiration after it is issued.}

\item{authorized_grant_types}{The list of grant types that can be used to obtain a token with this client. Types can include authorization_code, password, implicit, and client_credentials.}

\item{authorities}{The scopes that the client is able to grant itself when using the "client_credentials" grant type. Wildcards are not allowed.}

\item{additional_parameters}{\code{list} of parameters and lists to be added to the client creation payload}

\item{...}{additional parameters to be passed to \code{httr::POST} such as \code{httr::add_headers}}
}
\value{
A \code{sasClient} object list
}
\description{
Create a new client for API call
}
\examples{

\dontrun{
new_client <- register_client(sess, 'my_client', 'my_s3cr3t!')
new_client
}

}
