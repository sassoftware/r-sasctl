% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model_repository.R
\name{register_model}
\alias{register_model}
\title{Register a zip file inside model manager}
\usage{
register_model(
  session,
  file,
  name,
  project,
  type,
  force_pmml_translation = TRUE,
  exact = TRUE,
  force = FALSE,
  model_function = NULL,
  additional_project_parameters = NULL,
  version = "latest",
  project_description = "R SASctl automatic project",
  ...
)
}
\arguments{
\item{session}{viya_connection object, obtained through \code{session} function}

\item{file}{path to file}

\item{name}{model name that will be used when registering}

\item{project}{\code{MMproject} object, project ID or project name. If name, will try to find a single project with exact name match. See \code{exact} parameter}

\item{type}{string, pmml, spk, zip, astore or CAS,}

\item{force_pmml_translation}{default is TRUE, set to false will upload pmml as is, but may not work properly. Only if \code{type = "pmml"}}

\item{exact}{the filter query should use "contains" for partial match or "eq" for exact match}

\item{force}{Boolean, force the creation of project if unavailable}

\item{model_function}{\code{\link[=create_project]{create_project()}} parameter of model function of the created project if \code{force = TRUE}. Valid values: analytical, classification, cluster, forecasting, prediction, Text categorization, Text extraction, Text sentiment, Text topics, transformation}

\item{additional_project_parameters}{list of additional parameters to be passed to  \code{\link[=create_project]{create_project()}} \code{additional_parameters} parameter}

\item{version}{This parameter indicates to create a new project version, use the latest version, or use an existing version to import the model into. Valid values are 'NEW', 'LATEST', or a number.}

\item{project_description}{description string of additional parameters to be passed to \code{\link[=create_project]{create_project()}} \code{description} parameter}

\item{...}{pass to \code{sasctl::vPOST()} function}
}
\value{
a \code{MMmodel} class list
}
\description{
Registers a zip formatted model in SAS Model Manager.
}
\examples{

\dontrun{
### Building and registering a pmml model

library("pmml")

hmeq <- read.csv("https://support.sas.com/documentation/onlinedoc/viya/exampledatasets/hmeq.csv",
                 stringsAsFactors = TRUE)

hmeq <- na.omit(hmeq)

model1 <- lm(BAD ~ ., hmeq)


saveXML(pmml(model1, model.name="General_Regression_Model",
             app.name="Rattle/PMML",
             description="Linear Regression Model"),
             "my_model.pmml")
        
output <- register_model(session = sess,
                        file = "my_model.pmml",
                        name = "R_LinearModel",
                        type = "pmml", 
                         ## Project UUID example
                        projectId = "2322da44-9b24-43f6-96f4-456456231")

output

### Bulding and registering an astore model with SWAT

library("swat")

conn <- swat::CAS(hostname = "https://my.sas.server", ## change if needed
            port = 8777,
            username = "sasuser",
            password = "!s3cr3t")

swat::loadActionSet(conn, "astore")
swat::loadActionSet(conn, "decisionTree")


hmeq <- read.csv("https://support.sas.com/documentation/onlinedoc/viya/exampledatasets/hmeq.csv")
castbl <- cas.upload.frame(conn, hmeq)

colinfo <- cas.table.columnInfo(conn, table = castbl)$ColumnInfo
target <- colinfo$Column[1]
inputs <- colinfo$Column[-1]
nominals <- c(target, subset(colinfo, Type == 'varchar')$Column)

dt <- cas.decisionTree.dtreeTrain(conn,
                                  table = castbl,
                                  target = target,
                                  inputs = inputs,
                                  nominals = nominals,
                                  varImp = TRUE,
                                  ## save astore
                                  saveState = list(name = "dt_model_astore",
                                                   replace = TRUE), 
                                  casOut = list(name = 'dt_model', 
                                                replace = TRUE)
)
dt

## downloading astore
astore_blob <- cas.astore.download(conn,
                                   rstore =  list(name = "dt_model_astore")
)

## saving astore as binary file
astore_path <- "./rf_model.astore"
con <- file(astore_path, "wb")
### file is downloaded as base64 encoded
writeBin(object = jsonlite::base64_dec(astore_blob$blob$data), 
         con = con, useBytes = T)
         
close(con)

### sasctl connecting
sess <- session(hostname = "https://my.sas.server",
                username = "sasuser",
                password = "!s3cr3t")

output <- register_model(session = sess,
                          file = astore_path,
                          name = "R_swatModel",
                          type = "astore",
                          projectId = "a0c2923b-67e9-4e7f-b5d0-549a04103523") 

### Registering a Zip model

output <- register_model(session = sess,
                        file = "model.zip",
                        name = "R_LinearModel", 
                        type = "zip",
                        projectId = "2322da44-9b24-43f6-96f4-456456231") 

output
}

}
